"""
missile=4500
    win_rate 
        PPO y_1
        DQN eps=0 y_2
    returns
        PPO z_1
        DQN eps=0 z_2
missile=4750
    win_rate 
        PPO y_1
        DQN eps=0 y_2
    returns
        PPO z_1
        DQN eps=0 z_2
"""
import matplotlib.pyplot as plt
import numpy as np
y_1=[50.0, 100.0, 100.0, 100.0, 100.0, 90.0, 50.0, 50.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
y_1=np.array([i*0.01 for i in y_1])
y_2=[30.0, 90.0, 100.0, 30.0, 90.0, 90.0, 70.0, 60.0, 50.0, 100.0, 100.0, 100.0, 80.0, 50.0, 0.0, 10.0, 40.0, 90.0, 100.0, 100.0, 100.0, 50.0, 80.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 70.0, 50.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 50.0, 100.0, 100.0, 100.0]
y_2=np.array([i*0.01 for i in y_2])
y_3=np.ones(y_2.shape)
z_1= [-3733.785583620288, -2843.979118343976, -2899.39143559029, -1769.594530527506, -1325.1590641889259, -1945.7965416527536, -4164.932620432076, -4441.5164244871385, -4190.9626749096515, -6450.230156715537, -6310.645869828253, -6225.936803523235, -6238.676972230312, -6231.987294030613, -6205.394275382176, -6216.174882461497, -6205.658841491959, -6201.038274309561, -6225.86064911008, -6224.8221291117725, -6219.13995829072, -6217.086383933289, 
-6199.161721207272, -6203.208960064079, -6202.54540148158, -6199.161721207272, -6199.161721207272, -6199.161721207272, -6202.652002848705, -6203.150177433867, -6202.119562778158, -6199.161721207272, -6206.562302765711, -6199.776611724343, -6213.774366572948, -6202.481678610374, -6199.161721207272, -6199.161721207272, -6209.6810506033435, -6199.161721207272, -6199.161721207272, -6208.946051452494, -6204.559158306003, -6199.161721207272, -6199.161721207272, -6199.161721207272, -6199.161721207272, -6199.161721207272, -6199.161721207272, -6199.161721207272]
z_2= np.array( [-4232.192604338592, -1059.8189762735535, -834.4666227386413, -5003.794039611087, -2063.192859898033, -1366.0133843687283, -2628.7930957128624, -2828.8711757369174, -3420.9789343740367, -572.859257334426, -579.7831292358496, -581.506894187927, -1780.9342209609208, -3205.91174284889, -6140.791824075636, -5304.327080631328, -4441.390598642454, -1191.1402159314077, -572.7903245501751, -576.2971789453429, -584.543738635459, -3422.7710482511566, -1717.21787141072, -877.0588753665372, -663.2923156070574, -625.7244907010916, -685.2005486462306, -735.3341439153212, -895.5536881730293, -2654.180429553703, -3269.79025652326, -696.8965860627053, -907.2044802468967, -798.6550069589769, -629.181162947646, -595.0264644135881, -572.7903245501751, -578.2964283255026, -576.4658051266484, -583.8362358783497, -572.7903245501751, -572.7903245501751, -572.7903245501751, -572.7903245501751, -615.7335368563275, -580.227234472708, -3408.8971945523867, -801.7611769224322, -755.9488285160428, -678.7354743342403])
def plot_fig(y_1,y_2,y_3):
    # 定义长度为 10 的平均滤波器
    window = np.ones(10) / 10
    # 使用卷积计算滑动平均
    y_1_smooth = np.convolve(y_1, window, mode='valid')
    y_2_smooth = np.convolve(y_2, window, mode='valid')
    y_3_smooth = np.convolve(y_3, window, mode='valid')
    x = np.array(list(range(0, len(y_1_smooth))))
    # 示例数据
    plt.figure(dpi=250)
    # 创建折线图
    plt.plot(x, y_1_smooth, marker='o', linestyle='-', color='b', label='PPO',markersize=2)
    plt.plot(x, y_2_smooth, marker='o', linestyle='-', color='r', label='DQN',markersize=2)
    # plt.plot(x, y_3_smooth, marker='o', linestyle='-', color='orange', label='eps decreasing',markersize=2)

    shadow_width_1 = 500  # 阴影宽度
    y_1_upper = y_1_smooth + shadow_width_1
    y_1_lower = y_1_smooth - shadow_width_1
    y_2_upper = y_2_smooth + shadow_width_1
    y_2_lower = y_2_smooth - shadow_width_1
    y_3_upper = y_3_smooth + shadow_width_1
    y_3_lower = y_3_smooth - shadow_width_1
    # 填充阴影
    plt.fill_between(x, y_1_upper, y_1_lower, color='b', alpha=0.1)
    plt.fill_between(x, y_2_upper, y_2_lower, color='r', alpha=0.1)
    # plt.fill_between(x, y_3_upper, y_3_lower, color='orange', alpha=0.1)#alpha是不透明度
    # 添加标题和标签
    plt.title('Win_rate Curve of Different Greedy Degrees of DQN')
    plt.xlabel('Iteration(moving average)')
    plt.ylabel('Win_rate')
    # 添加网格
    plt.grid(True)
    # 显示图例
    plt.legend(loc='lower right',prop={'size':6})
    # 显示图表
    plt.show()
if __name__=="__main__":
    plot_fig(z_1,z_2,y_3)